name: Nightly build

on:
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      linux_builds: ${{ steps.prepare.outputs.linux_builds }}
      macos_builds: ${{ steps.prepare.outputs.macos_builds }}
      windows_builds: ${{ steps.prepare.outputs.windows_builds }}
      artifact_version_suffix: ${{ steps.prepare.outputs.artifact_version_suffix }}
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      - name: 'Prepare'
        id: prepare
        uses: actions/github-script@v7
        env:
          head_sha: ${{ github.sha }}
          version: 'vblabla'
        with:
          script: |
            var linux_builds = []
            var macos_builds = []
            var windows_builds = []
            const available_targets = require('./.github/build_targets.json')

            for (const tgt in available_targets) {
              if (available_targets[tgt].runner.startsWith('ubuntu')) {
                linux_builds.push(available_targets[tgt])
              } else if (available_targets[tgt].runner.startsWith('macos')) {
                macos_builds.push(available_targets[tgt])
              } else if (available_targets[tgt].runner.startsWith('windows')) {
                windows_builds.push(available_targets[tgt])
              }
            }
            core.setOutput('linux_builds', linux_builds)
            core.setOutput('macos_builds', macos_builds)
            core.setOutput('windows_builds', windows_builds)

            const now = new Date()
            const artifact_version_suffix = "-nightly-" + now.toISOString().slice(0,10).replace(/-/g,"")
            core.setOutput('artifact_version_suffix', artifact_version_suffix)

            console.log('linux: ', JSON.stringify(linux_builds))
            console.log('macox: ', JSON.stringify(macos_builds))
            console.log('windows: ', JSON.stringify(windows_builds))
            console.log('artifact_version_suffix: ', artifact_version_suffix)

  # run-ci:
  #   name: Create installers
  #   needs: prepare
  #   uses: ./.github/workflows/create-installers.yml
  #   with:
  #     linux_builds: ${{ needs.prepare.outputs.linux_builds }}
  #     macos_builds: ${{ needs.prepare.outputs.macos_builds }}
  #     windows_builds: ${{ needs.prepare.outputs.windows_builds }}
  #     head_sha: ${{ github.sha }}
  #     artifact_version_suffix: ${{ needs.prepare.outputs.artifact_version_suffix }}
  #
  # publish:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: 'Publish release'
  #       uses: actions/github-script@v7
  #       env:
  #         head_sha: ${{ github.sha }}
  #         version: 'vblabla'
  #       with:
  #         script: |
  #           var release = {
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               tag_name: 'nightly',
  #               name: 'Automated nightly build',
  #               body: 'Automated nightly build for Xournal++ ${{ env.version }}',
  #               prerelease: true,
  #               target_commitish: ${{ env.head_sha }},
  #               generate_release_notes: true
  #             }
  #
  #           try {
  #             const rel = await github.rest.repos.getRelease({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               tag: 'nightly'
  #             })
  #             console.log('Release found... updating it')
  #             console.log('release: ' + JSON.stringify(rel))
  #             release.id = rel.release.id
  #             github.rest.repos.updateRelease(release)
  #           } catch (error) {
  #             if (error.status != 404) {
  #               throw error
  #             }
  #             console.log('Release not found... creating it')
  #             const rel = await github.rest.repos.createRelease(release)
  #             console.log('release: ' + JSON.stringify(rel))
  #             release.id = rel.release.id
  #           }



#   run-ci:
#
# #Your build pipeline references an undefined variable named ‘echo "$f" | sed "s/xournalpp-\(\([0-9]\+\.\’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
# #Your build pipeline references an undefined variable named ‘basename "$f"’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
# #Your build pipeline references an undefined variable named ‘basename "$f"’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
# #Your build pipeline references an undefined variable named ‘echo "$(Build.BuildNumber’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
#   - stage: SetVersionInformation
#     jobs:
#       - job: 'Versioning'
#         pool:
#           vmImage: 'ubuntu-20.04'
#         displayName: 'Set Build Number'
#         steps:
#           - bash: |
#               mkdir build
#               cd build
#               cmake ..
#               exit 0
#             displayName: 'Create Version Information'
#           - bash: |
#               VER=$(cat VERSION | sed '1q;d')
#               TAG=`date +"%Y%m%d"`
#               echo "##vso[build.updatebuildnumber]${VER}-nightly.${TAG}"
#             name: 'VersionNightly'
#             displayName: 'Set Version Information for Nightly'
#             workingDirectory: ./build
#             condition: or(eq(variables['Build.Reason'], 'Schedule'), eq(variables['runForRelease'], 'Fa
# lse')) # Run for scheduled (nightlies)
#           - bash: |
#               VER=$(cat VERSION | sed '1q;d')
#               echo "##vso[build.updatebuildnumber]${VER}"
#             name: 'VersionRelease'
#             displayName: 'Set Version Information for Release'
#             workingDirectory: ./build
#             condition: or(eq(variables['Build.Reason'], 'IndividualCI'), ne(variables['runForRelease'],
#  'False')) # Run for non-scheduled (release)
#
# steps:
# - bash: |
#    VER=$(echo "$(Build.BuildNumber)" |  sed 's/.*\-*\(^\([0-9]\+\.\)\{2\}[0-9]\+\).*$/\1/')
#    echo "##vso[task.setvariable variable=ver]${VER}"
#
#   workingDirectory: '$(System.ArtifactsDirectory)/release'
#   displayName: 'Get Version'
# # steps:
# # - bash: |
# #    set -o xtrace
# #    set -e
# #
# #    # Windows installer
# #    mv windows/xournalpp-setup.exe windows/xournalpp-$(Build.BuildNumber)-windows.exe
# #    cd windows
# #    zip xournalpp-$(Build.BuildNumber)-windows.zip xournalpp-$(Build.BuildNumber)-windows.exe
# #    rm xournalpp-$(Build.BuildNumber)-windows.exe
# #    cd ..
# #
# #    # Windows portable
# #    mv windows-portable/ xournalpp-$(Build.BuildNumber)
# #    zip -r xournalpp-$(Build.BuildNumber)-windows-portable.zip xournalpp-$(Build.BuildNumber)/
# #    rm -r xournalpp-$(Build.BuildNumber)
# #
# #    # Ubuntu/Debian
# #    for f in linux-ubuntu-*-packages/xournalpp-* linux-debian-packages/xournalpp-*; do
# #        correct_name="$(echo "$f" | sed "s/xournalpp-\(\([0-9]\+\.\)\+[0-9]\+\)\(+[^-]\+\)\?-/xournalpp-$(Build.BuildNumber)-/")"
# #        [ ! "$f" = "$correct_name" ] && mv "$f" "$correct_name"
# #    done
# #
# #    # Rename URL in the .zsync file, so that it points to the renamed AppImage
# #    for f in linux-ubuntu-*-packages/xournalpp-*.AppImage; do
# #         zsf="$f".zsync
# #         if [ -f "$zsf" ]; then
# #           ai=$(basename "$f")
# #           sed -i "/URL:/c\URL: $ai" "$zsf"
# #         fi
# #    done
# #
# #    # MacOS
# #    mv macOS/Xournal++.zip macOS/xournalpp-$(Build.BuildNumber)-macos.zip
# #   workingDirectory: '$(System.ArtifactsDirectory)/release'
# #   displayName: 'Rename Artifacts for Release'
# steps:
# - task: cloudpup.universaltags.93b182f5-17d4-482f-b562-7e9a32209f2e.UniversalGitTag@0
#   displayName: 'Update Nightly Tag'
#   inputs:
#     credentials: 'Git Tag'
#     repoId: xournalpp/xournalpp
#     tagName: nightly
#     tagMessage: 'AzurePipelines build $(Build.BuildNumber)'
#     forcePush: true
#   condition: contains(variables['Build.BuildNumber'], 'nightly')
#   #Your build pipeline references an undefined variable named ‘VER’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
#
# steps:
# - task: GitHubRelease@1
#   displayName: 'GitHub Nightly Release (only executed for nightly builds)'
#   inputs:
#     gitHubConnection: 'Release Connection'
#     action: edit
#     tag: nightly
#     title: 'Automated nightly build'
#     releaseNotesSource: inline
#     releaseNotesInline: 'Automated nightly build for Xournal++ $(VER)+dev'
#     assets: '$(System.ArtifactsDirectory)/**'
#     isPreRelease: true
#   condition: contains(variables['Build.BuildNumber'], 'nightly')
#   steps:
# - task: GitHubRelease@1
#   displayName: 'GitHub Release Draft (only executed for tagged releases)'
#   inputs:
#     gitHubConnection: 'Release Connection'
#     tagPattern: '.*'
#     title: 'Xournal++ $(Build.BuildNumber)'
#     releaseNotesSource: inline
#     releaseNotesInline: |
#      Official release of Xournal++.
#
#      See the CHANGELOG.md in the attached sources for a detailed list of all changes included.
#     assets: '$(System.ArtifactsDirectory)/**'
#     isDraft: true
#   condition: not(contains(variables['Build.BuildNumber'], 'nightly'))
